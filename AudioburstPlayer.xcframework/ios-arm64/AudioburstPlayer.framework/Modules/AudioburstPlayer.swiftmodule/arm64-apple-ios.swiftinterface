// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AudioburstPlayer
import AVFoundation
import Alamofire
@_exported import AudioburstPlayer
import Cache
import CoreGraphics
import CoreLocation
import Foundation
import IBPCollectionViewCompositionalLayout
import LinkPresentation
import Lottie
import MediaPlayer
import MessageUI
import OwlKit
import SDWebImage
import Speech
import Swift
import UIKit.UIFont
import UIKit.UIImage
import UIKit
import UserNotifications
import os.log
import os
public struct UserExperience {
  public enum PlayerAction : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
    case channel(category: Swift.String)
    case userGenerated(id: Swift.String)
    case source(id: Swift.String)
    case account(id: Swift.String)
    case voice(data: Foundation.Data?)
  }
  public struct PlayerSettings : Swift.Codable {
    public var mode: AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode?
    public var accentColor: Swift.String?
    public var theme: AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme?
    public var autoplay: Swift.Bool?
    public var shuffle: Swift.Bool?
    public enum PlayerMode : Swift.String, Swift.Codable, Swift.CaseIterable {
      case button
      case banner
      public init?(rawValue: Swift.String)
      public typealias AllCases = [AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode]
      public typealias RawValue = Swift.String
      public static var allCases: [AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public enum PlayerTheme : Swift.String, Swift.Codable, Swift.CaseIterable {
      case light
      case dark
      public var systemTheme: UIKit.UIUserInterfaceStyle? {
        get
      }
      public init?(rawValue: Swift.String)
      public typealias AllCases = [AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme]
      public typealias RawValue = Swift.String
      public static var allCases: [AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension UIColor {
  public class func dynamicColor(light: UIKit.UIColor, dark: UIKit.UIColor) -> UIKit.UIColor
}
extension ABPlayer {
  public func set(playerState: AudioburstPlayer.CompactPlayerState)
  public func getPlayerStatus() -> AudioburstPlayer.CompactPlayerStatus?
  public func set(position: CoreGraphics.CGPoint)
  public func hidePlayer()
}
public class ABPlayer {
  public var shouldFilterListenedBursts: Swift.Bool {
    get
    set
  }
  public init(appKey: Swift.String, experienceId: Swift.String)
  public init(configuration: AudioburstPlayer.ABPlayer.Configuration)
  public func load(completion: @escaping (Swift.Result<UIKit.UIViewController, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void)
  public func initialize(completion: ((Swift.Result<Swift.Void, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void)?)
  public func showPlayer() -> UIKit.UIViewController?
  public func load(voiceData: Foundation.Data, completion: @escaping (Swift.Result<UIKit.UIViewController, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void)
  public func openFullscreenPlayer()
  public func showPlaylistsView(configuration: AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration, completion: @escaping (Swift.Result<UIKit.UIViewController, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void) -> UIKit.UIViewController?
  public func play()
  public func pause()
  public func add(errorListener: AudioburstPlayer.AudioburstPlayerErrorListener)
  public func remove(errorListener: AudioburstPlayer.AudioburstPlayerErrorListener)
  public func add(playerListener: AudioburstPlayer.AudioburstPlayerListener)
  public func remove(playerListener: AudioburstPlayer.AudioburstPlayerListener)
  public func showFullPlayerKeywords(shouldShow: Swift.Bool)
  public func getPlaylist(action: AudioburstPlayer.UserExperience.PlayerAction, completion: @escaping (Swift.Result<AudioburstPlayer.ABPlayer.ABPlaylist, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void)
  public func playPlaylist(action: AudioburstPlayer.UserExperience.PlayerAction, burstId: Swift.String? = nil, completion: @escaping (Swift.Result<UIKit.UIViewController, AudioburstPlayer.AudioburstPlayerError>) -> Swift.Void)
  @objc deinit
}
public protocol AudioburstPlayerErrorListener {
  func onError(error: AudioburstPlayer.AudioburstPlayerError)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class LoadableFromXibView : UIKit.UIView {
  @objc @IBOutlet weak public var view: UIKit.UIView!
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  open func onInit()
  @objc deinit
}
extension ABPlayer {
  public struct ABBurst : Swift.Codable {
    public let id: Swift.String
    public let title: Swift.String
    public let creationDate: Swift.String
    public let durationMilliseconds: Swift.UInt64
    public let sourceName: Swift.String
    public let category: Swift.String?
    public let playlistId: Swift.UInt64
    public let showName: Swift.String
    public let streamUrl: Swift.String?
    public let audioUrl: Swift.String
    public let imageUrls: [Swift.String]
    public let source: AudioburstPlayer.ABPlayer.ABBurst.Source
    public let shareUrl: Swift.String
    public let keywords: [Swift.String]
    public let ctaData: AudioburstPlayer.ABPlayer.ABBurst.CtaData?
    public struct Source : Swift.Codable {
      public let sourceName: Swift.String
      public let sourceType: Swift.String?
      public let showName: Swift.String
      public let durationFromStartMilliseconds: Swift.UInt64
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct CtaData : Swift.Codable {
      public let buttonText: Swift.String
      public let url: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public enum CompactPlayerState {
  case floating
  case expanded
  case sticky
  public static func == (a: AudioburstPlayer.CompactPlayerState, b: AudioburstPlayer.CompactPlayerState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CompactPlayerStatus {
  public let position: CoreGraphics.CGPoint
  public let state: AudioburstPlayer.CompactPlayerState
  public let lastActivation: Foundation.Date?
}
extension ABPlayer {
  public struct ABPlaylist : Swift.Codable {
    public let name: Swift.String
    public let bursts: [AudioburstPlayer.ABPlayer.ABBurst]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers open class CachingPlayerItem : AVFoundation.AVPlayerItem {
  @objc deinit
  open func download()
  @available(iOS 7.0, *)
  @objc override dynamic public init(asset: AVFoundation.AVAsset, automaticallyLoadedAssetKeys: [Swift.String]?)
}
public enum AudioburstPlayerError : Foundation.LocalizedError {
  case wrongAppKey
  case wrongExperienceId
  case contentNotReady
  case configurationError
  case other(Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
extension AudioburstPlayerError {
  public static func error(for error: Swift.Error) -> AudioburstPlayer.AudioburstPlayerError
}
extension ABPlayer {
  public struct Configuration : Swift.Codable {
    public let appKey: Swift.String
    public let playerAction: AudioburstPlayer.UserExperience.PlayerAction
    public let playerSettings: AudioburstPlayer.UserExperience.PlayerSettings
    public init(appKey: Swift.String, playerAction: AudioburstPlayer.UserExperience.PlayerAction, mode: AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode? = .button, theme: AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme? = .dark, accentColor: Swift.String? = "#ff009e", autoPlay: Swift.Bool? = true)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
extension ABPlayer {
  public struct PlaylistsViewConfiguration {
    public static let defaultTitle: Swift.String
    public enum SectionLayout : Swift.String {
      case horizontal
      case grid
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let showToolbar: Swift.Bool
    public let toolbarTitle: Swift.String
    public let showMyPlaylists: Swift.Bool
    public let sectionLayout: AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration.SectionLayout
    public let closeOnPlaylistLoad: Swift.Bool
    public init(showToolbar: Swift.Bool = true, toolbarTitle: Swift.String = defaultTitle, showMyPlaylists: Swift.Bool = true, sectionLayout: AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration.SectionLayout = .horizontal, closeOnPlaylistLoad: Swift.Bool = true)
  }
}
extension UIGestureRecognizer.State : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol AudioburstPlayerListener {
  func onClose()
  func onPlaylistsClose()
}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode : Swift.Equatable {}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode : Swift.Hashable {}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerMode : Swift.RawRepresentable {}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme : Swift.Equatable {}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme : Swift.Hashable {}
extension AudioburstPlayer.UserExperience.PlayerSettings.PlayerTheme : Swift.RawRepresentable {}
extension AudioburstPlayer.CompactPlayerState : Swift.Equatable {}
extension AudioburstPlayer.CompactPlayerState : Swift.Hashable {}
extension AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration.SectionLayout : Swift.Equatable {}
extension AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration.SectionLayout : Swift.Hashable {}
extension AudioburstPlayer.ABPlayer.PlaylistsViewConfiguration.SectionLayout : Swift.RawRepresentable {}
